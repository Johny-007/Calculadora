Nas primeiras linhas temos um conjunto de variáveis, lá temos variáveis de tela, cor, temos uma lista que guarda as posições dos botões de 0 a 9 respectivamente (essa lista será usada mais a frente como todas as variáveis aqui) e até mesmo temos a variável que guarda o som de colisão dos botões apertados.

Pós isso temos algumas funções, a primeiras dela é "gerar_rect" que o nome por si só é auto-explicativo, ela gera retângulos a partir duma função do Pygame (biblioteca importada no início do código); temos dentre as funções a função "gerar_texto" que por sua vez também é auto-explicativa, ela facilita o processo de criação e exibição de textos na tela, tela essa que foi/vai ser gerada a partir duma função do Pygame; por último mas não menos importante temos a função "mouse_button" que tal já não é tão auto-explicativa assim, mas não deixa de ser uma função simples, ela por sua vez verificar e retorna com booleans se o cursor do mouse está dentro da posição dada nos parâmetros da função ou não, ou seja, ela verifica e valida a posição do cursor do mouse, que posteriormente essa mesma posição será usada para verificar se houve interação do mouse com determinado botão ou não.

Agora entraremos no loop principal, nele já começamos pintando a tela de cinza, logo após criamos o sistema de botões que verifica se o mouse está passando encima dele ou não, caso o cursor do mouse não esteja encima dele a cor do botão é preta, entretanto, se o cursor ficar sobre ele a cor do botão fica branca, dessa forma se alcança maior interatividade e experiência com o usuário, no códigos vemos que isso é basicamente um "if" e um "elif", essa função foi aplicada em ambos os botões, tanto o de "créditos" quanto o "calculadora", nessas linhas também podemos notar que se há o uso da função "gerar_texto", muito útil diga-se de passagem

Abaixo temos um "for event" que vai verificar os eventos de teclado, mouse, etc; a primeira verificação desse laço for é se o QUIT foi acionado, ou seja, se o usuário apertou no "x" que fecha a janela, se for o caso, a janela é fechada. Pós isso o código verifica se o botão calculadora foi apertado, ali notamos o uso da função "mouse_button", vemos que ela verifica se a região passada pelos parâmetros recebeu interatividade ou não, logo aí vemos que se a região do botão calculadora receber interatividade entraremos em um novo loop, o loop da calculadora, ao entramos nele se é notável que logo ali se tem novamente o uso da função "mouse_button" mas dessa vez verificamos se o botão de voltar para o menu inicial foi acionado, com o uso das funções criar o botão custou apenas 8 linhas, oq sem tais usaria mais de 15...

Vemos abaixo disso uma sequência de funções sendo acionadas, essas são responsáveis por gerar a interface gráfica, são funções que geram retângulos e acima delas funções que geram texto, pós isso temos as funções que geram as linhas de divisória

Em sequência vemos um novo "for event" dentro desse novo loop, o loop da calculadora, esse laço for por sua vez, vai primeiramente verificar se o botão QUIT foi acionado, assim como anteriormente, em seguida ele verifica eventos do tipo "MOUSEBUTTONDONW", ou seja, verifica se houve interação com o mouse.

A primeira verificação é para o botão voltar, logo em seguidas temos novamente um laço for, mas dessa vez é um laço for inteligente, lembram-se daquela lista que continham as posição dos números de forma linear? Então, esse laço for faz uma verificação de 0 a 9, fazendo um fatiamento daquela lista de forma respectiva e os testa um por um na função "mouse_butto", ou seja, esse laço for verifica de cada um dos botões de 0 a 9 foram acionados. Os dados desses números são agrupados numa variável chamado "result02", nela são guardados como uma string.

Em sequência, temos as verificações dos operadores aritméticos, que tais também fazem uso da função "mouse_button", há princípio temos o botão de "=" que por sua vez, se acionado, faz com que a variável cálculo receba a função eval que tem como parâmetros a string result02.

Deixem-me explicar melhor, a variável result02 é uma string, a função eval() faz o cálculo de strings e os transformar em um número inteiro, a variável calculo por sua vez recebe esse número inteiro, e posteriormente, a variável result02 recebe a variável cálculo, entretanto, ela o recebe como string novamente, afinal para exibir o valor na tela precisa ser string. Mais para frente isso se mostra, mas irei antecipar, quem está sendo exibido na tela é a variável "result02", é importante ressaltar isso agora para que entendam melhor o conceito recém apresentando e para que também entendam com facilidade os conceitos a seguir

Pós isso, verificamos o botão "C" e o "<-", o "C" por sua vez transforma a variável de exibição(result02) em uma string vazia, já o "<-" faz um fatiamento e apaga o último índice da variável.

Agora chegamos aos operadores de fato, notamos que todos eles estão identados dentro de um grande if, chamado de "apertou_operador", esse if em questão verifica se algum operador já não está digitado na variável de exibição, isto é, ele verifica se o usuário não está digitando mais de um operador de modo que posteriormente poderia vir a dar erro, ou seja, esse if não permite que você digite um "55+/*-7" por exemplo. Pós ele temos todos os operadores, tais quais não se há muito segredo, se o operador mais for digitado ele ira somar "+" a string de exibição e o mesmo se adapta aos outros.

Logo após, temos a função criada anteriormente "gerar_texto" ela que está sendo responsável por mostrar os valores na tela. 

E por fim, temos um if que é associado ao botão de voltar criado logo no início desse loop calculadora e por último tbm temos uma função responsável por atualizar a tela.

Agora saímos do loop calculadora e voltamos ao loop principal, mas dando sequência logo chegamos em um novo loop, o loop créditos, que por sua vez é tão simples e semelhante quanto o loop anterior, esse dispensa comentários, é apenas alguns textos desenhados a partir do uso da função criada anteriormente e uma verificação de botão apertado, que verifica o botão de voltar para o loop principal, no final desse loop temos um uma função responsável por atualizar a tela e fora desse loop na última linha do código dentro da identação do loop principal temos uma função que por sua vez também é responsável por atualizar a tela, e fim.

Esse texto foi criado com o intuito de facilitar a lida do código, além de demonstrar e desenvolver minha habilidade expressiva e didática.
Texto feito por Johny Barbosa Santos, dúvidas quanto ao código entrar nas redes dispostas no perfil fo gitbuh